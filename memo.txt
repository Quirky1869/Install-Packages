################################ MEMO ################################
suppr : recon-ng gpaint netcat -> sudo apt-get install netcat-traditional
################################ RESTE A FAIRE ################################ 

# !!!!!!!    Avant de configurer rclone assurez-vous d'ouvrir obsidian une 1ere fois et selectionner comme coffre à ouvrir ~/Obsidian_Vault    !!!!!!! #

# https://youtu.be/n7yB1x2vhKw?si=d1taOzN_OHBl2cXp&t=378

# Install Rclone for Google Drive

# sudo apt install rclone rclone-browser
# rclone config

# 1ere Etape
Faite de Google Chrome votre navigateur par defaut (en le lançant une fenetre devrait apparaitre avec un message "definir chrome comme navigateur par defaut")

# 2eme Etape
# - Faire "n" pour un nouveau remote
# - Lui donné un nom -> "Google-drive" par exemple
# - Comme il faut taper "drive"       storage > drive
# - Pour client_id et client_secret faire "entrer"
# - Pour scope choisir le valeur voulu en fonction du besoin      scope > 1
# - Pour root_folder_id faire entrer
# - Pour service_account_file faire "entrer"
# - Advanced config faire non "n"
# - Use auto config faire oui "y"
# - Ensuite une page web est censé s'ouvrir sur google avec une liaison sur rclone -> l'adresse doit ressembler à 127.0.0.1/53682/auth?state=...............;
# - Connectez-vous à votre compte google voulu   ->   suite à cela une page avec "Success All done. Please go back to rclone" doit s'afficher
# - Share drive (team drive) répondre non "n"
# - Keep this drive remote répondre oui "y"
# - Faire un ctrl + c une fois revenu au menu principal de rclone
# - Faire un "rclone ls Google-drive:" pour vérifier l'état du drive

# Pour envoyer un fichier à la racine de google drive via rclone il faudra faire :
# rclone copy /home/$USER/Documents/notre-fichier.txt Google-drive:/

# Si on veux spécifier un dossier dans google drive alors il faudra taper :
# rclone copy /home/$USER/Documents/notre-fichier.txt Google-drive:/nom-dossier-cible

# Si on veux télécharger les fichiers/dossiers de google-drive vers notre pc alors il faut taper :
rclone sync Google-drive:/Obsidian-Google-Drive /home/$USER/Obsidian_Vault/


# !!!!!!! Pour faire une tache au demmarage avec cron !!!!!!! #

# Faire "crontab -e"
# Dans le nano qui s'ouvre taper "@reboot bash /usr/local/bin/synchro-google-drive-to-pc-obsidian.sh"
# Puis faire ctrl + s et ctrl+ x


################################ DIVERS ################################

# Compiz wobbly windows effect :
# https://extensions.gnome.org/extension/3210/compiz-windows-effect/

# Dans "Extensions"
# Paramètres : 
Friction : 3.5
Sping : 6.4
Speedup Factor : 15.5
Mass : 50
X Tiles : 6
Y Tiles : 6


# Pour changer le bashrc faite un : cp -f <.bashrc_voulu> .bashrc

#################### OBSIDIAN ########################

# Bonnes pratiques obsidian

# Activer les modules -> paramètres -> Modules complémentaires -> activé
# Rechercher Excalidraw et l'installer + installer les plugins de logo

# Dans Paramètres -> fichiers et liens -> chemin du dossier des pièces jointes -> "Dans le dossier spécifié ci-dessous" -> selectionner un dossier créer 

# Dans Paramètres -> Apparence installé les themes voulu si cela n'est pas deja fait

# Les logos pour excalidraw sont stockés dans "/home/$USER/Documents/Excalidraw"

#################### NOTIFY-SEND ########################

# Exemple de notify-send

# notify-send -i face-wink "reussi"

# face-smile
# face-sad
# face-laugh
# face-cool
# face-angel
# face-angry
# face-devilish
# face-crying
# face-kiss
# face-plain
# face-surprise
# face-wink-big
# face-yawn
# face-laugh-big
# face-wink-big
# face-evil-grin
# face-smirk
# face-smile-big
# face-uncertain
# face-worried

# dialog-information
# dialog-warning
# dialog-question
# dialog-password
# network-error
# network-offline
# battery-low
# battery-caution
# battery-empty
# audio-volume-muted
# audio-volume-low
# audio-volume-medium
# audio-volume-high
# mail-read
# mail-unread
# mail-replied
# mail-forwarded
# mail-marked
# mail-signed
# appointment-soon
# appointment-missed
# appointment-late
# emblem-default
# emblem-important
# emblem-favorite
# emblem-synchronized
# emblem-unreadable
# emblem-symbolic-link
# emblem-readonly
# emblem-shared

##################### DOCKER KEY #######################
Sign-in Docker Desktop (https://docs.docker.com/desktop/setup/sign-in/#credentials-management-for-linux-users)

gpg --generate-key (répondre aux questions)
pass init <your_generated_gpg-id_public_key>  (où "your_generated_gpg-id_public_key" est la clé "pub" généré avec la commande précédente)

(message output) -> mkdir: created directory '/home/molly/.password-store/'


####################### CURSORS #####################


OREO CURSORS :
https://www.pling.com/p/1360254/
https://github.com/milkmadedev/oreo-cursors-compiled

####################### VS CODE #####################
Pour vs code (.md)
- L'extention "paste images" permet de choisir le dossier dans lequel les images seront copier -> le raccourci par défaut est crtl+alt+v
- On peut régler le dossier par defaut des images, le nom ... dans les paramètres en tapant ceci "@ext:mushan.vscode-paste-image"
- Exemple de dossier par défaut : ${currentFileDir}/_images
- Le raccourci clavier peut etre changer dans le fichier "keybindings.json" -> faire F1 puis taper "Preferences: open keyboard shortcuts (JSON)"
- Mettre ceci pour changer la valeur par defaut du copier coller de paste image :
{
    "key": "ctrl+shift+v",
    "command": "extension.pasteImage",
    "when": "editorTextFocus"
}

##################### MICRO #######################
micro :
Changer le type de colorisation dans micro
`crtl + e`
`set filetype shell`

##################### KITTY TERMINAL #######################
Lien Kitty Terminal:
https://sw.kovidgoyal.net/kitty/overview/#other-keyboard-shortcuts



#!/bin/bash
sudo apt install -y git curl

curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
sudo ln -sf ~/.local/kitty.app/bin/kitty ~/.local/kitty.app/bin/kitten /usr/local/bin

cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/

cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/

sed -i "s|Icon=kitty|Icon=$(readlink -f ~)/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty*.desktop

sed -i "s|Exec=kitty|Exec=$(readlink -f ~)/.local/kitty.app/bin/kitty|g" ~/.local/share/applications/kitty*.desktop

echo 'kitty.desktop' > ~/.config/xdg-terminals.list

touch ~/.config/kitty/kitty.conf

cat <<EOF >> ~/.config/kitty/kitty.conf
#### Permet de lancer une application (ici lazydocker) dans un nouvel onglet (tab) ou fenetre (window) ####
map alt+l launch --type=tab lazydocker
#map alt+l launch --type=window lazydocker

#### Permet de gerer l'opacité de la fenetre kitty (ctrl + shift + a puis l ou m) ####
dynamic_background_opacity yes

### Baisse l'opacité du terminal de manière définitive ####
background_opacity 0.95

#### Permet de régler la couleur du background et foreground du terminal ####
# foreground #dddddd
# background #000000

#### Permet de rendre le background flouté ####
# background_blur 0

#### Permet de mettre une image en fond d'écran (PNG/JPEG/WEBP/TIFF/GIF/BMP) ####
# background_image none
# background_image ~/Images/wallpaper.jpg

#### Permet de récupérer les couleurs de .bashrc ou .zshrc (Inutile si un thème est installé) #### 
allow_remote_control yes
term xterm-256color

#### Permet de changer la couleur du texte sélectionné ####
# selection_foreground #000000
# selection_background #fffacd

#### Laisse passer le raccourci ctrl + shift + left ou right ####
map ctrl+shift+left send_text all \x1b[1;6D
map ctrl+shift+right send_text all \x1b[1;6C

#### Permet avec un clic droit de coller ####
mouse_map right press ungrabbed paste_from_clipboard

#### Permet de changer l'emplacement des tab des terminaux (Pour créer :ctrl + shift + t), (Pour fermer ctrl + shift + w) (Valeur possible : top ) ####
#tab_bar_edge top

#### Permet d'afficher le numéro et le titre sur les tab ####
tab_title_template {index}: {title}
#tab_title_template "Onglet {index}"

#### Permet de changer le style de la police dans les tab des terminaux ####
#inactive_tab_font_style normal
#active_tab_font_style   italic

#### Permet de naviguer entre les fenêtres splitter (créer split ctrl + shift + entrée)(Fermer un split ctrl + shift + w) ####
#map shift+alt+Down     next_window
#map shift+alt+Up       previous_window
map ctrl+Down     next_window
map ctrl+Up       previous_window

#### Permet de régler la couleur du curseur ####
# cursor red
# cursor #2a7aef

#### Permet de régler la taille du terminal par défaut ####
# remember_window_size  yes
# initial_window_width  640
# initial_window_height 400
EOF

cd ~/.config/kitty
git clone https://github.com/kovidgoyal/kitty-themes.git
# Commande pour changer de theme -> kitty +kitten themes

# notify-send -i face-wink "Kitty themes" "Commande pour changer de thème : kitty +kitten themes" -t 3000

# Juste pour info : un theme dracula est disponible
# https://github.com/dracula/kitty


===================== Lazy Docker ==================
# https://github.com/jesseduffield/lazydocker
curl https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash

=============== Mettre kitty en terminal par defaut ==================
# sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator ~/.local/kitty.app/bin/kitty 50
# sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator $(which kitty) 50
# sudo update-alternatives --config x-terminal-emulator
# Puis selectionner le terminal kitty
# gsettings set org.gnome.desktop.default-applications.terminal exec kitty
# gsettings set org.gnome.desktop.default-applications.terminal exec /home/$USER/.local/kitty.app/bin/kitty





=============== noir obscur =================
# https://github.com/Stunkymonkey/nautilus-open-any-terminal/tree/master
# 
# sudo apt install python3-nautilus gir1.2-gtk-4.0
# pip install nautilus-open-any-terminal --break-system-packages
# sudo apt install dconf-editor
# sudo glib-compile-schemas /usr/share/glib-2.0/schemas


============== noir obscur mais 2 ===============
# https://github.com/bassmanitram/actions-for-nautilus
# sudo apt install -y python3-nautilus python3-gi procps libjs-jquery
# git clone https://github.com/bassmanitram/actions-for-nautilus.git
# cd actions-for-nautilus
# make install
# Pour l'installer sur tout le système :
# ⤷ sudo make install_global

##################### PET #####################
# lien : https://github.com/knqyf263/pet?tab=readme-ov-file
wget https://github.com/knqyf263/pet/releases/download/v1.0.1/pet_1.0.1_linux_amd64.deb
sudo dpkg -i pet_1.0.1_linux_amd64.deb
sudo apt update -y && sudo apt install fzf -y
## export EDITOR=micro
# pet configure
# pet new
# pet list
# pet edit
# pet search
# pet exec


##################### ZSH #######################

!!! TERMINAL ZSH !!!

========== A la mano ===============
sudo apt update -y (sudo apt update -y --fix-missing)
sudo apt install zsh git curl

chsh -s $(which zsh)    OU     "which zsh"      puis  "chsh -s /usr/bin/zsh"
((touch ~/.zshrc)) <- Copier le contenue du prompt kali
(logoff de la session)
(à la reconnexion il faut choisir le choix 2)
((Si le fichier .zshrc à déjà été créer alors aucun menu n'apparait))

### install oh-my-zsh ###
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

=========== Dans le script =============
- sudo apt update -y (sudo apt update -y --fix-missing)
- sudo apt install zsh git curl
- chsh -s $(which zsh)
- sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"       (répondre "y" à la question voulez vouos changer de shell)
mv -f ~/.zshrc  ~/.zshrc.ori
cp -f ./Necessary/zsh/.zschrc  ~/.zschrc
source ~/.zshrc

(si cela ne fonctionne pas il faut installer les plugins en premier dans le .zshrc créer d'origine puis refaire un source .zshrc et ensuite faire un cp de .zshrc-kali .zshrc)

(Aller dans ~/.zshrc)
plugins=(git docker python zsh-autosuggestions zsh-syntax-highlighting zsh-completions)

cd ~/.oh-my-zsh/custom/plugins/

(zsh-autosuggestions)
git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions

(zsh-syntax-highlighting)
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting


(zsh-completions)
git clone https://github.com/zsh-users/zsh-completions ~/.oh-my-zsh/custom/plugins/zsh-completions

source ~/.zshrc

### Ajouter des polices (fonts) ###
sudo apt install -y fonts-powerline
echo "\ue0b0 \u00b1 \ue0a0 \u27a6 \u2718 \u26a1 \u2699"

### Pour apprendre à personnaliser le zsh prompt ###
aller dans : ~/.oh-my-zsh/themes
et faire : nano bira.zsh-theme

============================================
Le .zshrc de Kali :


# ~/.zshrc file for zsh interactive shells.
# see /usr/share/doc/zsh/examples/zshrc for examples

setopt autocd              # change directory just by typing its name
#setopt correct            # auto correct mistakes
setopt interactivecomments # allow comments in interactive mode
setopt magicequalsubst     # enable filename expansion for arguments of the form ‘anything=expression’
setopt nonomatch           # hide error message if there is no match for the pattern
setopt notify              # report the status of background jobs immediately
setopt numericglobsort     # sort filenames numerically when it makes sense
setopt promptsubst         # enable command substitution in prompt

WORDCHARS=${WORDCHARS//\/} # Don't consider certain characters part of the word

# hide EOL sign ('%')
PROMPT_EOL_MARK=""

# configure key keybindings
bindkey -e                                        # emacs key bindings
bindkey ' ' magic-space                           # do history expansion on space
bindkey '^U' backward-kill-line                   # ctrl + U
bindkey '^[[3;5~' kill-word                       # ctrl + Supr
bindkey '^[[3~' delete-char                       # delete
bindkey '^[[1;5C' forward-word                    # ctrl + ->
bindkey '^[[1;5D' backward-word                   # ctrl + <-
bindkey '^[[5~' beginning-of-buffer-or-history    # page up
bindkey '^[[6~' end-of-buffer-or-history          # page down
bindkey '^[[H' beginning-of-line                  # home
bindkey '^[[F' end-of-line                        # end
bindkey '^[[Z' undo                               # shift + tab undo last action

# enable completion features
autoload -Uz compinit
compinit -d ~/.cache/zcompdump
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' rehash true
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# History configurations
HISTFILE=~/.zsh_history
HISTSIZE=1000
SAVEHIST=2000
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
#setopt share_history         # share command history data

# force zsh to show the complete history
alias history="history 0"

# configure `time` format
TIMEFMT=$'\nreal\t%E\nuser\t%U\nsys\t%S\ncpu\t%P'

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

configure_prompt() {
    prompt_symbol=㉿
    # Skull emoji for root terminal
    #[ "$EUID" -eq 0 ] && prompt_symbol=💀
    case "$PROMPT_ALTERNATIVE" in
        twoline)
            PROMPT=$'%F{%(#.blue.green)}┌──${debian_chroot:+($debian_chroot)─}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))─}(%B%F{%(#.red.blue)}%n'$prompt_symbol$'%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/…/%4~.%5~)%b%F{%(#.blue.green)}]\n└─%B%(#.%F{red}#.%F{blue}$)%b%F{reset} '
            # Right-side prompt with exit codes and background processes
            #RPROMPT=$'%(?.. %? %F{red}%B⨯%b%F{reset})%(1j. %j %F{yellow}%B⚙%b%F{reset}.)'
            ;;
        oneline)
            PROMPT=$'${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%B%F{%(#.red.blue)}%n@%m%b%F{reset}:%B%F{%(#.blue.green)}%~%b%F{reset}%(#.#.$) '
            RPROMPT=
            ;;
        backtrack)
            PROMPT=$'${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%B%F{red}%n@%m%b%F{reset}:%B%F{blue}%~%b%F{reset}%(#.#.$) '
            RPROMPT=
            ;;
    esac
    unset prompt_symbol
}

# The following block is surrounded by two delimiters.
# These delimiters must not be modified. Thanks.
# START KALI CONFIG VARIABLES
PROMPT_ALTERNATIVE=twoline
NEWLINE_BEFORE_PROMPT=yes
# STOP KALI CONFIG VARIABLES

if [ "$color_prompt" = yes ]; then
    # override default virtualenv indicator in prompt
    VIRTUAL_ENV_DISABLE_PROMPT=1

    configure_prompt

    # enable syntax-highlighting
    if [ -f /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
        . /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
        ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
        ZSH_HIGHLIGHT_STYLES[default]=none
        ZSH_HIGHLIGHT_STYLES[unknown-token]=underline
        ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=cyan,bold
        ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=green,underline
        ZSH_HIGHLIGHT_STYLES[global-alias]=fg=green,bold
        ZSH_HIGHLIGHT_STYLES[precommand]=fg=green,underline
        ZSH_HIGHLIGHT_STYLES[commandseparator]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[autodirectory]=fg=green,underline
        ZSH_HIGHLIGHT_STYLES[path]=bold
        ZSH_HIGHLIGHT_STYLES[path_pathseparator]=
        ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]=
        ZSH_HIGHLIGHT_STYLES[globbing]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[command-substitution]=none
        ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter]=fg=magenta,bold
        ZSH_HIGHLIGHT_STYLES[process-substitution]=none
        ZSH_HIGHLIGHT_STYLES[process-substitution-delimiter]=fg=magenta,bold
        ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=fg=green
        ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=fg=green
        ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
        ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=yellow
        ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=yellow
        ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]=fg=yellow
        ZSH_HIGHLIGHT_STYLES[rc-quote]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=magenta,bold
        ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=magenta,bold
        ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]=fg=magenta,bold
        ZSH_HIGHLIGHT_STYLES[assign]=none
        ZSH_HIGHLIGHT_STYLES[redirection]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[comment]=fg=black,bold
        ZSH_HIGHLIGHT_STYLES[named-fd]=none
        ZSH_HIGHLIGHT_STYLES[numeric-fd]=none
        ZSH_HIGHLIGHT_STYLES[arg0]=fg=cyan
        ZSH_HIGHLIGHT_STYLES[bracket-error]=fg=red,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-1]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-2]=fg=green,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-3]=fg=magenta,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-4]=fg=yellow,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-5]=fg=cyan,bold
        ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]=standout
    fi
else
    PROMPT='${debian_chroot:+($debian_chroot)}%n@%m:%~%(#.#.$) '
fi
unset color_prompt force_color_prompt

toggle_oneline_prompt(){
    if [ "$PROMPT_ALTERNATIVE" = oneline ]; then
        PROMPT_ALTERNATIVE=twoline
    else
        PROMPT_ALTERNATIVE=oneline
    fi
    configure_prompt
    zle reset-prompt
}
zle -N toggle_oneline_prompt
bindkey ^P toggle_oneline_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*|Eterm|aterm|kterm|gnome*|alacritty)
    TERM_TITLE=$'\e]0;${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%n@%m: %~\a'
    ;;
*)
    ;;
esac

precmd() {
    # Print the previously configured title
    print -Pnr -- "$TERM_TITLE"

    # Print a new line before the prompt, but only if it is not the first line
    if [ "$NEWLINE_BEFORE_PROMPT" = yes ]; then
        if [ -z "$_NEW_LINE_BEFORE_PROMPT" ]; then
            _NEW_LINE_BEFORE_PROMPT=1
        else
            print ""
        fi
    fi
}

# enable color support of ls, less and man, and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    export LS_COLORS="$LS_COLORS:ow=30;44:" # fix ls color for folders with 777 permissions

    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias diff='diff --color=auto'
    alias ip='ip --color=auto'

    export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
    export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
    export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
    export LESS_TERMCAP_so=$'\E[01;33m'    # begin reverse video
    export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
    export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
    export LESS_TERMCAP_ue=$'\E[0m'        # reset underline

    # Take advantage of $LS_COLORS for completion as well
    zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
    zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
fi

# some more ls aliases
alias ll='ls -al'
alias la='ls -A'
alias l='ls -CF'

# enable auto-suggestions based on the history
if [ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
    . /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
    # change suggestion color
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#999'
fi

# enable command-not-found if installed
if [ -f /etc/zsh_command_not_found ]; then
    . /etc/zsh_command_not_found
fi

#############################################################
#eval $(thefuck --alias) # s'appui sur Thefuck
### Encore et encore des alias ###
alias dns="nmcli device show | grep IP4.DNS" # S'appui sur network-manager
alias ipls="netplan status" # S'appui sur iproute2
alias metasploit="msfconsole" # S'appui sur metasploit-framework
alias bat="batcat"
alias logoff="skill -KILL -u $USER" # S'appui sur procps
alias getuser="cut -d: -f1 /etc/passwd" # s'appui sur cut
alias pythonserver="sudo python3 -m http.server" # S'appui sur Python 3
alias service="systemctl list-units --type=service" # S'appui sur systemctl
alias allservice="systemctl list-units --type=service --all" # S'appui sur systemctl
alias servicesystemd="systemctl list-unit-files" # S'appui sur systemd
alias whatfilemanager="xdg-mime query default inode/directory"
alias whatenvironment="echo $XDG_CURRENT_DESKTOP"

alias outlook="/opt/google/chrome/google-chrome --profile-directory=Default --app-id=faolnafnngnfdaknnbpnkhgohbobgegn"
alias teams="/opt/google/chrome/google-chrome --profile-directory=Default --app-id=cifhbcnohmdccbgoicgdjpfamggdegmo"
alias sharepoint="/opt/google/chrome/google-chrome --profile-directory=Default --app-id=kndjacdfoigegepplldliojaijgkknic"
alias 3cx="/opt/google/chrome/google-chrome --profile-directory=Default --app-id=nlpendabdhapjkjlaefgikkcfoldfnac %U"


alias ninja="/home/$USER/Public/binaryninja/binaryninja"
alias docker="sudo docker"

# Autosuggestions
if [ -f ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
    source ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

# Syntax Highlighting
if [ -f ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
    source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# Completions
if [ -f ~/.oh-my-zsh/custom/plugins/zsh-completions/zsh-completions.plugin.zsh ]; then
    source ~/.oh-my-zsh/custom/plugins/zsh-completions/zsh-completions.plugin.zsh
fi

##################### SYMBOLES #######################

TROUVER SUR : application "CARACTERES" de ubuntu
ou
"Universal character map" de Windows 

kali :
┌──
└─
㉿
💀
[38;5;33m\]
[38;5;33m\]
[38;5;33m\]
[38;5;231m\]

=====================
╔═
╚═
╔═(test☠test-pc)⎯ [~/Documents]
╚═$

╓─
╚═
╓─(test⌾test-pc)⎯ [~/Documents]
╚═$

╒═
╘══
╒═(test⌬test-pc)⎯ [~/Documents]
╘══$

╓─
╙
╓─(test⏣test-pc)⎯ [~/Documents]
╙───$

╒═
╘══❵
╒═(test⏣test-pc)⎯ [~/Documents]
╘══❵$


⌬     ⌾     ⏣    

⎯


╒═(test⌬test-pc) ⎯ [~/Documents]
╘══$

=====================
Japon :
Aller à Kyoto
⤷ U+4EAC    京
⤷ U+90FD    都
⤷ U+3078    へ
⤷ U+884C   行
⤷ U+304F   く

▬▬ι══════ﺤ

### Japan ###
symbol='▬▬ι══════>'                                                                                                     hiragana='京都へ行く'

export PS1="\[\e[38;5;9m\]\u\[\e[38;5;15m\]@\[\e[38;5;205m\]\h $symbol \[\e[38;5;248m\]\w $hiragana \[\033[0m\]$ "

=====================
battery_percentage=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep -E "percentage" | awk '{print $2}')

# Afficher le pourcentage de la batterie
echo "Pourcentage de la batterie : $battery_percentage%"🔋


#####################  #######################
